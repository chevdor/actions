name: GPG Sign check

on:
  # pull_request:
  #   branches:
  #     - master
  push:
    branches:
      - "*"
    # tags:
    #   - "v*"
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

      - name: Check tooling
        run: |
          echo "::group::Check tooling"
          gpg --version
          echo "::endgroup::"

      - name: Generate data to sign
        run: |
          date > data.txt
          echo "foobar" > foobar.txt

      - name: Sign data
        id: gpg_sign
        uses: ./gpg-sign
        with:
          key: ${{ secrets.GPG_PRIVATE_KEY }}
          file: data.txt

      - name: Verify signature OK
        id: gpg_verif_good
        uses: ./gpg-verify
        with:
          key: ${{ secrets.GPG_PUBLIC_KEY }}
          sig_file: data.txt.asc

      - name: Verify bad signature
        id: gpg_verif_bad
        continue-on-error: true
        uses: ./gpg-verify
        with:
          key: ${{ secrets.GPG_PUBLIC_KEY }}
          sig_file: data.txt.asc
          file: foobar.txt

      - name: Checks
        run: |
          good=${{ steps.gpg_verif_good.outputs.result }}
          bad=${{ steps.gpg_verif_bad.outputs.result }}

          echo "good: $good"
          echo "bad: $bad"

          if (( $good == 0 && $bad == 1 )); then
            exit 0
          else
            exit 1
          fi
  
      # - name: Check
      #   env:
      #     GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
      #   run: |
      #     ls -al

      #     echo "Importing public key"
      #     echo "${GPG_PUBLIC_KEY}" | gpg --import

      #     echo "Listing known keys"
      #     gpg -k

      #     sig_file=${{ steps.gpg_sign.outputs.sig_file }}
      #     echo "Signature found in: ${sig_file}"

      #     gpg --verify "${sig_file}"
      #     RESULT=$?

      #     if [ $RESULT -eq 0 ]; then
      #       echo "Signature OK"
      #     else
      #       echo "Signature FAILED"
      #     fi
